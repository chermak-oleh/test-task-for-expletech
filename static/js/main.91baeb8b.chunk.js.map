{"version":3,"sources":["store/hooks.ts","utils/fetchClient.ts","types/Status.ts","slices/apiPostsSlice.ts","api/getApiData.ts","slices/apiCommentsSlice.ts","components/Slider/Slider.tsx","components/CreatePostForm/CreatePostForm.tsx","components/CreatePostModal/CreatePostModal.tsx","components/NavBar/NavBar.tsx","components/Footer/Footer.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","request","url","method","data","options","BASE_URL","body","JSON","stringify","headers","fetch","then","response","json","Status","client","initialState","posts","status","Loading","loadPostsAsync","createAsyncThunk","createPostAsync","post","createPost","postsSlice","createSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","Succeeded","payload","rejected","Failed","comments","loadCommentsAsync","a","loadedComments","commentsSlice","Slider","dispatch","apiPosts","apiComments","useEffect","preparePosts","useMemo","map","findComments","filter","comment","postId","id","title","className","style","maxWidth","maxHeight","overflow","length","email","CreatePostForm","useState","userId","setUserId","setTitle","description","setDescription","error","setError","showNotification","setShowNotification","addNewPost","trimmedTitle","trim","trimmedDescription","titleErrorCondition","descErrorCondition","type","onClick","onSubmit","event","preventDefault","value","onChange","target","placeholder","required","CreatePostModal","onCloseModalButton","aria-label","NavBar","onAddPostButton","role","Footer","footerStyle","backgroundImage","backgroundSize","backgroundPosition","App","showModal","setShowModal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","apiCommentsReducer","apiPostsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91baeb8b.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable import/no-cycle */\n/* eslint-disable react-hooks/rules-of-hooks */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport function request<T>(\n  url: string,\n  method = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n  const BASE_URL = 'https://jsonplaceholder.typicode.com/';\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n};\n","/* eslint-disable no-shadow */\nexport enum Status {\n  Loading = 'loading',\n  Succeeded = 'succeeded',\n  Failed = 'failed',\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-unused-expressions */\n/* eslint-disable import/no-cycle */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createPost, getApiPosts } from '../api/getApiData';\nimport { RootState } from '../store/store';\nimport { Post } from '../types/Post';\nimport { Status } from '../types/Status';\nimport { NewPost } from '../types/NewPost';\n\nexport interface State {\n  posts: Post[];\n  status: Status;\n}\n\nconst initialState: State = {\n  posts: [],\n  status: Status.Loading,\n};\n\nexport const loadPostsAsync = createAsyncThunk(\n  'posts/fetchPosts',\n  () => {\n    const loadedPosts: Promise<Post[]> = getApiPosts();\n\n    return loadedPosts;\n  },\n);\n\nexport const createPostAsync = createAsyncThunk(\n  'posts/addPost',\n  (post: NewPost) => {\n    const createdPost = createPost(post);\n\n    return createdPost;\n  },\n);\n\nexport const postsSlice = createSlice({\n  name: 'apiPosts',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadPostsAsync.pending, (state) => {\n        state.status = Status.Loading;\n      })\n      .addCase(loadPostsAsync.fulfilled, (state, action) => {\n        state.status = Status.Succeeded;\n        state.posts = action.payload;\n      })\n      .addCase(loadPostsAsync.rejected, (state) => {\n        state.status = Status.Failed;\n      })\n      .addCase(createPostAsync.pending, (state) => {\n        state.status = Status.Loading;\n      })\n      .addCase(createPostAsync.fulfilled, (state, action) => {\n        state.status = Status.Succeeded;\n        state.posts = [...state.posts, action.payload];\n      })\n      .addCase(createPostAsync.rejected, (state) => {\n        state.status = Status.Failed;\n      });\n  },\n});\n\nexport default postsSlice.reducer;\n\nexport const selectPosts = (state: RootState) => state.apiPosts.posts;\n","import { Comment } from '../types/Comment';\nimport { NewPost } from '../types/NewPost';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getApiPosts = (): Promise<Post[]> => {\n  return client.get('posts');\n};\n\nexport const getApiComments = (): Promise<Comment[]> => {\n  return client.get('comments');\n};\n\nexport const createPost = (post: NewPost) => {\n  return client.post<Post>('posts', post);\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-unused-expressions */\n/* eslint-disable import/no-cycle */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getApiComments } from '../api/getApiData';\nimport { RootState } from '../store/store';\nimport { Comment } from '../types/Comment';\nimport { Status } from '../types/Status';\n\nexport interface State {\n  comments: Comment[],\n  status: Status;\n}\n\nconst initialState: State = {\n  comments: [],\n  status: Status.Loading,\n};\n\nexport const loadCommentsAsync = createAsyncThunk(\n  'comments/fetchComments',\n  async () => {\n    const loadedComments: Comment[] = await getApiComments();\n\n    return loadedComments;\n  },\n);\n\nexport const commentsSlice = createSlice({\n  name: 'apiComments',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadCommentsAsync.pending, (state) => {\n        state.status = Status.Loading;\n      })\n      .addCase(loadCommentsAsync.fulfilled, (state, action) => {\n        state.status = Status.Succeeded;\n        state.comments = action.payload;\n      })\n      .addCase(loadCommentsAsync.rejected, (state) => {\n        state.status = Status.Failed;\n      });\n  },\n});\n\nexport default commentsSlice.reducer;\n\nexport const selectComments = (state: RootState) => state.apiComments.comments;\n","import React, { useEffect, useMemo } from 'react';\nimport AwesomeSlider from 'react-awesome-slider';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { loadPostsAsync } from '../../slices/apiPostsSlice';\nimport { loadCommentsAsync } from '../../slices/apiCommentsSlice';\n\nexport const Slider: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const posts = useAppSelector(state => state.apiPosts.posts);\n  const comments = useAppSelector(state => state.apiComments.comments);\n\n  useEffect(() => {\n    dispatch(loadPostsAsync());\n    dispatch(loadCommentsAsync());\n  }, []);\n\n  const preparePosts = useMemo(() => {\n    return posts.map(post => {\n      const findComments = comments.filter(comment => comment.postId === post.id);\n\n      return {\n        ...post,\n        comments: findComments,\n      };\n    });\n  }, [posts, comments]);\n\n  return (\n    <AwesomeSlider>\n      {preparePosts.map(post => {\n        const { id, title, body } = post;\n\n        return (\n          <div className=\"slider-content\" key={id}>\n            <div className=\"box\" style={{ maxWidth: '750px', maxHeight: '600px', overflow: 'auto' }}>\n              <p className=\"title\">\n                {title}\n              </p>\n              <p className=\"subtitle\">\n                {body}\n              </p>\n              <h1 className=\"title mt-2\">Comments:</h1>\n              {post.comments.length > 0\n                ? post.comments.map(comment => {\n                  const {\n                    email, name,\n                  } = comment;\n\n                  return (\n                    <article className=\"message is-dark\" key={comment.id}>\n                      <div className=\"message-header\">\n                        <p>{`${name} / ${email}`}</p>\n                      </div>\n                      <div className=\"message-body\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  );\n                })\n                : (\n                  <p>There is no comments yet</p>\n                )}\n            </div>\n          </div>\n        );\n      })}\n    </AwesomeSlider>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState } from 'react';\nimport { useAppDispatch } from '../../store/hooks';\nimport { createPostAsync } from '../../slices/apiPostsSlice';\n\nexport const CreatePostForm: React.FC = () => {\n  const [userId, setUserId] = useState(1);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState(false);\n  const [showNotification, setShowNotification] = useState(false);\n  const dispatch = useAppDispatch();\n\n  const usersIds = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n  const addNewPost = async () => {\n    const trimmedTitle = title.trim();\n    const trimmedDescription = description.trim();\n\n    const newPost = {\n      title: trimmedTitle,\n      body: trimmedDescription,\n      userId,\n    };\n\n    dispatch(createPostAsync(newPost));\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setUserId(+value);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setTitle(value);\n  };\n\n  const handleDescriptionChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { value } = event.target;\n\n    setDescription(value);\n  };\n\n  const clearForm = () => {\n    setUserId(1);\n    setTitle('');\n    setDescription('');\n    setError(false);\n  };\n\n  const onFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title || !description) {\n      setError(true);\n\n      return;\n    }\n\n    addNewPost();\n    clearForm();\n    setShowNotification(true);\n  };\n\n  const onCloseNotification = () => {\n    setShowNotification(false);\n  };\n\n  const titleErrorCondition = !title && error;\n  const descErrorCondition = !description && error;\n\n  if (showNotification) {\n    return (\n      <div className=\"notification is-success\">\n        <button className=\"delete\" type=\"button\" onClick={onCloseNotification}></button>\n        <p>Post created successfully</p>\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={onFormSubmit} className=\"container\">\n      <div className=\"field\">\n        <label className=\"label\">User ID</label>\n        <div className=\"control\">\n          <div className=\"select\">\n            <select value={userId} onChange={handleUserIdChange}>\n              {usersIds.map(id => (\n                <option key={id}>{id}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label\">Title</label>\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder=\"Post title\"\n            value={title}\n            onChange={handleTitleChange}\n            required\n          />\n          {titleErrorCondition && (\n            <span className=\"has-text-danger\">Please enter a title</span>\n          )}\n        </div>\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label\">Description</label>\n        <div className=\"control\">\n          <textarea\n            className=\"textarea\"\n            placeholder=\"Post description\"\n            value={description}\n            onChange={handleDescriptionChange}\n            required\n          >\n          </textarea>\n          {descErrorCondition && (\n            <span className=\"has-text-danger\">Please enter a description</span>\n          )}\n        </div>\n      </div>\n\n      <button className=\"button is-info\" type=\"submit\">Add Post</button>\n    </form>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport { CreatePostForm } from '../CreatePostForm';\n\ntype Props = {\n  onCloseModalButton: () => void;\n};\n\nexport const CreatePostModal: React.FC<Props> = ({ onCloseModalButton }) => {\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\"></div>\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">Create Post</p>\n          <button className=\"delete\" aria-label=\"close\" type=\"button\" onClick={onCloseModalButton}></button>\n        </header>\n        <section className=\"modal-card-body\">\n          <CreatePostForm />\n        </section>\n        <footer className=\"modal-card-foot\">\n        </footer>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  onAddPostButton: () => void;\n};\n\nexport const NavBar: React.FC<Props> = ({ onAddPostButton }) => {\n  return (\n    <nav className=\"navbar is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n        <strong className=\"navbar-item\">Carousel of Posts</strong>\n      </div>\n\n      <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            <button className=\"button is-info\" type=\"button\" onClick={onAddPostButton}>\n              <strong>Add post</strong>\n            </button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React from 'react';\n\nexport const Footer: React.FC = () => {\n  const backgroundImageUrl\n  = 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/Flag_of_Ukraine.svg/1599px-Flag_of_Ukraine.svg.png?20100406171642';\n\n  const footerStyle = {\n    backgroundImage: `url(${backgroundImageUrl})`,\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  };\n\n  return (\n    <footer className=\"footer\" style={footerStyle}>\n      <div className=\"content has-text-centered has-text-white\">\n        <p>SPA made by Oleh Chermak</p>\n      </div>\n    </footer>\n  );\n};\n","import React, { useState } from 'react';\nimport { Slider } from './components/Slider/Slider';\nimport { CreatePostModal } from './components/CreatePostModal';\nimport { NavBar } from './components/NavBar';\nimport { Footer } from './components/Footer';\n\nconst App: React.FC = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const onAddPostButton = () => {\n    setShowModal(true);\n  };\n\n  const onCloseModalButton = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <NavBar onAddPostButton={onAddPostButton} />\n      {showModal && (\n        <CreatePostModal onCloseModalButton={onCloseModalButton} />\n      )}\n      <Slider />\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable import/no-cycle */\n/* eslint-disable import/no-named-as-default-member */\n/* eslint-disable import/no-named-as-default */\nimport { configureStore } from '@reduxjs/toolkit';\nimport apiCommentsReducer from '../slices/apiCommentsSlice';\nimport apiPostsReducer from '../slices/apiPostsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    apiComments: apiCommentsReducer,\n    apiPosts: apiPostsReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-awesome-slider/dist/styles.css';\nimport './index.scss';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}