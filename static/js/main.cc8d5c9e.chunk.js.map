{"version":3,"sources":["app/hooks.ts","utils/fetchClient.ts","types/status.ts","features/apiPostsSlice.ts","api/getApiData.ts","features/apiCommentsSlice.ts","components/Slider/Slider.tsx","components/CreatePostForm/CreatePostForm.tsx","components/CreatePostModal/CreatePostModal.tsx","components/NavBar/NavBar.tsx","components/Footer/Footer.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","request","url","method","data","options","BASE_URL","body","JSON","stringify","headers","fetch","then","response","json","Status","client","initialState","posts","status","Loading","loadPostsAsync","createAsyncThunk","createPostAsync","post","createPost","postsSlice","createSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","Succeeded","payload","rejected","Failed","comments","loadCommentsAsync","a","loadedComments","commentsSlice","Slider","dispatch","apiPosts","apiComments","useEffect","preparePosts","useMemo","map","findComments","filter","comment","postId","id","title","postComments","className","length","commentId","email","commentBody","usersIds","CreatePostForm","useState","showNotification","setShowNotification","onFormSubmit","userId","description","newPost","trim","type","onClick","onSubmit","initialValues","validate","values","errors","render","handleSubmit","component","placeholder","meta","input","error","touched","CreatePostModal","React","memo","onCloseModalButton","aria-label","NavBar","onAddPostButton","role","Footer","App","showModal","setShowModal","useCallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","apiCommentsReducer","apiPostsReducer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cc8d5c9e.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NewPost } from '../types/newPost';\n\ntype RequestMethod = 'GET' | 'POST';\n\nexport function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: NewPost | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n  const BASE_URL = 'https://jsonplaceholder.typicode.com/';\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n};\n","/* eslint-disable no-shadow */\nexport enum Status {\n  Loading = 'loading',\n  Succeeded = 'succeeded',\n  Failed = 'failed',\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createPost, getApiPosts } from '../api/getApiData';\nimport { Post } from '../types/post';\nimport { Status } from '../types/status';\nimport { NewPost } from '../types/newPost';\n\nexport interface State {\n  posts: Post[];\n  status: Status;\n}\n\nconst initialState: State = {\n  posts: [],\n  status: Status.Loading,\n};\n\nexport const loadPostsAsync = createAsyncThunk(\n  'posts/fetchPosts',\n  () => {\n    const loadedPosts: Promise<Post[]> = getApiPosts();\n\n    return loadedPosts;\n  },\n);\n\nexport const createPostAsync = createAsyncThunk(\n  'posts/addPost',\n  (post: NewPost) => {\n    const createdPost = createPost(post);\n\n    return createdPost;\n  },\n);\n\nexport const postsSlice = createSlice({\n  name: 'apiPosts',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadPostsAsync.pending, (state) => {\n        state.status = Status.Loading;\n      })\n      .addCase(loadPostsAsync.fulfilled, (state, action) => {\n        state.status = Status.Succeeded;\n        state.posts = action.payload;\n      })\n      .addCase(loadPostsAsync.rejected, (state) => {\n        state.status = Status.Failed;\n      })\n      .addCase(createPostAsync.pending, (state) => {\n        state.status = Status.Loading;\n      })\n      .addCase(createPostAsync.fulfilled, (state, action) => {\n        state.status = Status.Succeeded;\n        state.posts = [...state.posts, action.payload];\n      })\n      .addCase(createPostAsync.rejected, (state) => {\n        state.status = Status.Failed;\n      });\n  },\n});\n\nexport default postsSlice.reducer;\n","import { Comment } from '../types/comment';\nimport { NewPost } from '../types/newPost';\nimport { Post } from '../types/post';\nimport { client } from '../utils/fetchClient';\n\nexport const getApiPosts = (): Promise<Post[]> => {\n  return client.get('posts');\n};\n\nexport const getApiComments = (): Promise<Comment[]> => {\n  return client.get('comments');\n};\n\nexport const createPost = (post: NewPost) => {\n  return client.post<Post>('posts', post);\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getApiComments } from '../api/getApiData';\nimport { Comment } from '../types/comment';\nimport { Status } from '../types/status';\n\nexport interface State {\n  comments: Comment[],\n  status: Status;\n}\n\nconst initialState: State = {\n  comments: [],\n  status: Status.Loading,\n};\n\nexport const loadCommentsAsync = createAsyncThunk(\n  'comments/fetchComments',\n  async () => {\n    const loadedComments: Comment[] = await getApiComments();\n\n    return loadedComments;\n  },\n);\n\nexport const commentsSlice = createSlice({\n  name: 'apiComments',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadCommentsAsync.pending, (state) => {\n        state.status = Status.Loading;\n      })\n      .addCase(loadCommentsAsync.fulfilled, (state, action) => {\n        state.status = Status.Succeeded;\n        state.comments = action.payload;\n      })\n      .addCase(loadCommentsAsync.rejected, (state) => {\n        state.status = Status.Failed;\n      });\n  },\n});\n\nexport default commentsSlice.reducer;\n","import React, { useEffect, useMemo } from 'react';\nimport AwesomeSlider from 'react-awesome-slider';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { loadPostsAsync } from '../../features/apiPostsSlice';\nimport { loadCommentsAsync } from '../../features/apiCommentsSlice';\nimport { PrepPost } from '../../types/prepPost';\n\nexport const Slider: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const posts = useAppSelector(state => state.apiPosts.posts);\n  const comments = useAppSelector(state => state.apiComments.comments);\n\n  useEffect(() => {\n    dispatch(loadPostsAsync());\n    dispatch(loadCommentsAsync());\n  }, []);\n\n  const preparePosts: PrepPost[] = useMemo(() => {\n    return posts.map(post => {\n      const findComments = comments.filter(comment => comment.postId === post.id);\n\n      return {\n        ...post,\n        comments: findComments,\n      };\n    });\n  }, [posts, comments]);\n\n  return (\n    <AwesomeSlider>\n      {preparePosts.map(({\n        id,\n        title,\n        body,\n        comments: postComments,\n      }) => {\n        return (\n          <div className=\"slider-content\" key={id}>\n            <div className=\"box post-content\">\n              <p className=\"title\">\n                {title}\n              </p>\n              <p className=\"subtitle\">\n                {body}\n              </p>\n              <h1 className=\"title mt-2\">Comments:</h1>\n              {postComments.length > 0\n                ? postComments.map(({\n                  id: commentId,\n                  name,\n                  email,\n                  body: commentBody,\n                }) => (\n                  <article className=\"message is-dark\" key={commentId}>\n                    <div className=\"message-header\">\n                      <p>{`${name} / ${email}`}</p>\n                    </div>\n                    <div className=\"message-body\">\n                      {commentBody}\n                    </div>\n                  </article>\n                ))\n                : (\n                  <p>There is no comments yet</p>\n                )}\n            </div>\n          </div>\n        );\n      })}\n    </AwesomeSlider>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState } from 'react';\nimport { Form, Field } from 'react-final-form';\nimport { useAppDispatch } from '../../app/hooks';\nimport { createPostAsync } from '../../features/apiPostsSlice';\n\ntype Values = {\n  userId: number,\n  title: string,\n  description: string,\n};\n\ntype Errors = {\n  title?: string,\n  userId?: string,\n  description?: string,\n};\n\nconst usersIds = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nexport const CreatePostForm: React.FC = () => {\n  const [showNotification, setShowNotification] = useState(false);\n  const dispatch = useAppDispatch();\n\n  const initialValues: Values = {\n    userId: 1,\n    title: '',\n    description: '',\n  };\n\n  const validate = (values: Values) => {\n    const { userId, title, description } = values;\n\n    const errors: Errors = {};\n\n    if (!title || !title.trim()) {\n      errors.title = 'Please enter a title';\n    }\n\n    if (!userId) {\n      errors.userId = 'Please select id of user';\n    }\n\n    if (!description || !description.trim()) {\n      errors.description = 'Please enter a description';\n    }\n\n    return errors;\n  };\n\n  const onFormSubmit = async ({ userId, title, description }: Values) => {\n    const newPost = {\n      userId,\n      title: title.trim(),\n      body: description.trim(),\n    };\n\n    dispatch(createPostAsync(newPost));\n\n    setShowNotification(true);\n  };\n\n  const onCloseNotification = () => {\n    setShowNotification(false);\n  };\n\n  if (showNotification) {\n    return (\n      <div className=\"notification is-success\">\n        <button className=\"delete\" type=\"button\" onClick={onCloseNotification}></button>\n        <p>Post created successfully</p>\n      </div>\n    );\n  }\n\n  return (\n    <Form\n      onSubmit={onFormSubmit}\n      initialValues={initialValues}\n      validate={validate}\n      render={({ handleSubmit }) => (\n        <form className=\"container\" onSubmit={handleSubmit}>\n          <div className=\"field\">\n            <label className=\"label\">User ID</label>\n            <div className=\"control\">\n              <div className=\"select\">\n                <Field\n                  name=\"userId\"\n                  component=\"select\"\n                >\n                  {usersIds.map(id => (\n                    <option key={id}>{id}</option>\n                  ))}\n                </Field>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Title</label>\n\n            <Field\n              name=\"title\"\n              component=\"input\"\n              placeholder=\"Post title\"\n              type=\"text\"\n            >\n              {({ meta, input }) => (\n                <div className=\"control\">\n                  <input\n                    className=\"input\"\n                    {...input}\n                  />\n                  {meta.error && meta.touched && <span className=\"has-text-danger\">Please enter a title</span>}\n                </div>\n              )}\n            </Field>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Description</label>\n\n            <Field\n              name=\"description\"\n              component=\"textarea\"\n              placeholder=\"Post description\"\n            >\n              {({ meta, input }) => (\n                <div className=\"control\">\n                  <textarea\n                    className=\"textarea\"\n                    {...input}\n                  />\n                  {meta.error && meta.touched && <span className=\"has-text-danger\">Please enter a description</span>}\n                </div>\n              )}\n            </Field>\n          </div>\n\n          <button className=\"button is-info\" type=\"submit\">Add Post</button>\n        </form>\n      )}\n    />\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport { CreatePostForm } from '../CreatePostForm';\n\ntype Props = {\n  onCloseModalButton: () => void;\n};\n\nexport const CreatePostModal: React.FC<Props> = React.memo(({ onCloseModalButton }) => (\n  <div className=\"modal is-active\">\n    <div className=\"modal-background\"></div>\n    <div className=\"modal-card\">\n      <header className=\"modal-card-head\">\n        <p className=\"modal-card-title\">Create Post</p>\n        <button className=\"delete\" aria-label=\"close\" type=\"button\" onClick={onCloseModalButton}></button>\n      </header>\n      <section className=\"modal-card-body\">\n        <CreatePostForm />\n      </section>\n      <footer className=\"modal-card-foot\">\n      </footer>\n    </div>\n  </div>\n));\n","import React from 'react';\n\ntype Props = {\n  onAddPostButton: () => void;\n};\n\nexport const NavBar: React.FC<Props> = React.memo(({ onAddPostButton }) => (\n  <nav className=\"navbar is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\n    <div className=\"navbar-brand\">\n      <strong className=\"navbar-item\">Carousel of Posts</strong>\n    </div>\n\n    <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n      <div className=\"navbar-end\">\n        <div className=\"navbar-item\">\n          <button className=\"button is-info\" type=\"button\" onClick={onAddPostButton}>\n            <strong>Add post</strong>\n          </button>\n        </div>\n      </div>\n    </div>\n  </nav>\n));\n","import React from 'react';\n\nexport const Footer: React.FC = () => (\n  <footer className=\"footer footer-image\">\n    <div className=\"content has-text-centered has-text-white\">\n      <p>SPA made by Oleh Chermak</p>\n    </div>\n  </footer>\n);\n","import React, { useCallback, useState } from 'react';\nimport { Slider } from './components/Slider/Slider';\nimport { CreatePostModal } from './components/CreatePostModal';\nimport { NavBar } from './components/NavBar';\nimport { Footer } from './components/Footer';\n\nconst App: React.FC = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const onAddPostButton = useCallback(() => {\n    setShowModal(true);\n  }, []);\n\n  const onCloseModalButton = useCallback(() => {\n    setShowModal(false);\n  }, []);\n\n  return (\n    <>\n      <NavBar onAddPostButton={onAddPostButton} />\n      {showModal && (\n        <CreatePostModal onCloseModalButton={onCloseModalButton} />\n      )}\n      <Slider />\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable import/no-cycle */\nimport { configureStore } from '@reduxjs/toolkit';\nimport apiCommentsReducer from '../features/apiCommentsSlice';\nimport apiPostsReducer from '../features/apiPostsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    apiComments: apiCommentsReducer,\n    apiPosts: apiPostsReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-awesome-slider/dist/styles.css';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}